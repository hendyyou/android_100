package cn.digione.yibaic.shop.ui;

import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import cn.digione.yibaic.shop.R;
import cn.digione.yibaic.shop.acitvity.ShoppingActivity;
import cn.digione.yibaic.shop.bean.JsonNoneOutBean;
import cn.digione.yibaic.shop.bean.ShoppingCartItemBean;
import cn.digione.yibaic.shop.common.Constants;
import cn.digione.yibaic.shop.http.CustomerJsonHttpResponseHandler;
import cn.digione.yibaic.shop.http.DisplayImageOptionsForCustom;
import cn.digione.yibaic.shop.http.HttpClient;
import cn.digione.yibaic.shop.util.Utils;
import com.loopj.android.http.RequestParams;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;

import java.util.HashMap;
import java.util.Map;

/**
 * Created with IntelliJ IDEA. User: youzh Date: 14-3-11 Time: 上午10:33
 */
public class EditCartItemFragment extends BaseFragment {
    private static OnEidtCartItemCountllListener mEidtCartItemCount;
    private TextView cartItemTitleTV;
    private TextView cartItemPriceTV;
    private TextView adaptPhoneTV;
    private Spinner numberSpinner;
    private Button delCartItemBtn;
    private ImageView productPic;
    private ArrayAdapter<Integer> spinnerAdapter;
    private Integer[] spArray = new Integer[]{1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
    private ShoppingCartItemBean mShoppingCartItemBean;
    private CustomerJsonHttpResponseHandler<JsonNoneOutBean> mModifyShopCartItem;
    private int mCartItemPosition = -1;
    private int mSpinnerPosition = -1;
    private ImageLoadingListener mImageLoadingListener;
    private int inSpindex = -1;

    // 数据专递接口
    public interface OnEidtCartItemCountllListener {
        public void changeCount(int count, int position);
    }

    public static EditCartItemFragment newInstance(String s) {
        EditCartItemFragment newFragment = new EditCartItemFragment();
        Bundle bundle = new Bundle();
        newFragment.setArguments(bundle);
        return newFragment;
    }

    public ShoppingActivity getParent() {
        return (ShoppingActivity) getActivity();
    }

    public static void setEidtCartItemCount(OnEidtCartItemCountllListener eidtCartItemCount) {
        mEidtCartItemCount = eidtCartItemCount;
    }

    public void requestHttp(String url, RequestParams params, CustomerJsonHttpResponseHandler httpResponseHandler) {
        HttpClient client = HttpClient.getInstall(getParent());
        client.postAsync(url, params, httpResponseHandler);
    }

    private void deleteCartItemRequestHttp(Integer id) {
        String url = Constants.NetWorkRequest.SHOPPING_DELETE_CART_URL;
        url = String.format(url, id);
    /*        Map<String, String> map = new HashMap<String, String>();
            RequestParams params = new RequestParams(map);
           map.put("searchProductVO.proClass", mCategoryId + "");
           map.put("searchProductVO.proModel", mProModel);
           map.put("searchProductVO.proRom", mProRom);
            map.put("searchProductVO.pageSize", mPageSize + "");
           map.put("searchProductVO.currentPage", mCurrentPage + "");*/
        requestHttp(url, null, mCustomerJsonHttpResponseHandler);
    }

    private void editCartItemRequestHttp(Integer id, Integer num) {
        String url = Constants.NetWorkRequest.SHOPPING_MODIFY_CART_URL;
        url = String.format(url, id);
        Map<String, String> map = new HashMap<String, String>();
        map.put("num", String.valueOf(num));
        RequestParams params = new RequestParams(map);
        requestHttp(url, params, mModifyShopCartItem);
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        mCustomerJsonHttpResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getParent(), false) {
            @Override
            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {
                mEidtCartItemCount.changeCount(0, mCartItemPosition);
                getParent().showFragment("shopping_fragment", null, false);
            }
        };

        mModifyShopCartItem = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getParent(), false) {
            @Override
            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {
                if (mSpinnerPosition != -1 && mCartItemPosition != -1) {
                    mEidtCartItemCount.changeCount(spArray[mSpinnerPosition], mCartItemPosition);
                    String price = Utils.Money.MoneyToYuan(mShoppingCartItemBean.getProPrice() * spArray[mSpinnerPosition]);
                    cartItemPriceTV.setText("￥" + price);
                    // getParent().showFragment("shopping_fragment", null, false);
                }

            }
        };
        this.mImageLoadingListener = DisplayImageOptionsForCustom.getImageLoadingListener();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        super.onCreateView(inflater, container, savedInstanceState);
        View view = inflater.inflate(R.layout.edit_cartitem_fragment, container, false);
        numberSpinner = (Spinner) view.findViewById(R.id.sp_edit_cart_number);

        cartItemTitleTV = (TextView) view.findViewById(R.id.tv_edit_cart_product_title);
        cartItemPriceTV = (TextView) view.findViewById(R.id.tv_edit_cart_price);
        adaptPhoneTV = (TextView) view.findViewById(R.id.tv_adapt_phone_label);
        delCartItemBtn = (Button) view.findViewById(R.id.btn_delete_cart_item);
        productPic = (ImageView) view.findViewById(R.id.iv_edit_cart_item_pic);

        mShoppingCartItemBean = (ShoppingCartItemBean) getArguments().getSerializable("cart_item_object");
        mCartItemPosition = getArguments().getInt("cart_item_position");

        Integer num = mShoppingCartItemBean.getNum();
        Integer resNum = mShoppingCartItemBean.getProRes();
        Boolean isDebug = Boolean.valueOf(getString(R.string.debug));
        if (isDebug) {
            //判断购物车数量，如果大于10.
            if (num != null && num > 10) {
                int len = num + 2;
                spArray = new Integer[len];
                for (int i = 0; i < len; i++) {
                    spArray[i] = i + 1;
                    if (i == num) {
                        inSpindex = i - 1;
                    }
                }
            } else {
                if (num != null && num <= 10 && num > 0) {
                    inSpindex = num - 1;
                }
            }
        } else {
            if (resNum != null && resNum > 0) {
                for (int i = 0; i < resNum; i++) {
                    spArray[i] = i+1;
                    if (i == num) {
                        inSpindex = i - 1;
                    }
                }
            }
        }

        // int inSpindex = Arrays.in

        String picURL = mShoppingCartItemBean.getProPic();
        if (!TextUtils.isEmpty(picURL)) {
            ImageLoader imageLoader = ImageLoader.getInstance();
            productPic.setImageDrawable(null);
            imageLoader.displayImage(picURL, productPic, mImageLoadingListener);
        } else {
            productPic.setImageResource(R.drawable.no_picture);
        }

        String proName = mShoppingCartItemBean.getProName() == null ? "" : mShoppingCartItemBean.getProName();
        String proColor = mShoppingCartItemBean.getProColor() == null ? "" : mShoppingCartItemBean.getProColor();
        String proRom = mShoppingCartItemBean.getProRom() == null ? "" : mShoppingCartItemBean.getProRom();
        String proVersion = mShoppingCartItemBean.getProVersion() == null ? "" : mShoppingCartItemBean.getProVersion();
        String title = proName + " " + proVersion + " " + proRom + " " + proColor;

        cartItemTitleTV.setText(title);
        String price = Utils.Money.MoneyToYuan(mShoppingCartItemBean.getProPrice() * num);
        cartItemPriceTV.setText("￥" + price);

        spinnerAdapter = new ArrayAdapter<Integer>(getActivity(), android.R.layout.simple_spinner_item, spArray);
        spinnerAdapter.setDropDownViewResource(R.layout.spinner_dropdown);
        numberSpinner.setAdapter(spinnerAdapter);
        numberSpinner.setSelection(num - 1);

        delCartItemBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mShoppingCartItemBean != null) {
                    deleteCartItemRequestHttp(mShoppingCartItemBean.getId());
                }
            }
        });

        numberSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                if (mShoppingCartItemBean != null && inSpindex != position) {
                    editCartItemRequestHttp(mShoppingCartItemBean.getId(), spArray[position]);
                    mSpinnerPosition = position;
                }

            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {

            }
        });
        return view;
    }
}
