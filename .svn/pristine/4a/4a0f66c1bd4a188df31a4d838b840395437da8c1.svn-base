package cn.digione.yibaic.shop.adapter;

import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.*;
import cn.digione.yibaic.shop.R;
import cn.digione.yibaic.shop.acitvity.BaseActivity;
import cn.digione.yibaic.shop.bean.ProductColorBean;
import cn.digione.yibaic.shop.http.DisplayImageOptionsForCustom;
import cn.digione.yibaic.shop.util.ToastUtil;
import cn.digione.yibaic.shop.util.Utils;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.assist.ImageLoadingListener;

import java.util.List;

/**
 * Created with IntelliJ IDEA. User: youzh Date: 14-3-6 Time: 下午2:39
 */
public class ProductColorAdapter extends BaseAdapter {
    private final String JCODE_BUY_NOW = "jcode_buy_now";
    private final String JCODE_SELL_OUT = "jcode_sell_out";
    //1:未开放预约,2:立即预约，3：预约已过期，4：未开放购买，5：立即购买，6：已售罄
    private final String GER_BOOK_BEFORE = "ger_book_before";
    private final String GER_BOOK_NOW = "ger_book_now";
    private final String GER_BOOK_AFTER = "ger_book_after";
    private final String GER_BUY_BEFORE = "ger_buy_before";
    private final String GER_BUY_NOW = "ger_buy_now";
    private final String GER_SELL_OUT = "ger_sell_out";

    private BaseActivity mContext;
    private LayoutInflater mLayoutInflater;
    private List<ProductColorBean> datas;
    private ImageLoadingListener mImageLoadingListener;
    private String mJcode = null;
    private ProductOperatorListener mProductOperatorListener;

    public ProductColorAdapter(final BaseActivity mContext, List<ProductColorBean> datas, String jcode) {
        this.datas = datas;
        this.mContext = mContext;
        this.mLayoutInflater = LayoutInflater.from(mContext);
        this.mImageLoadingListener = DisplayImageOptionsForCustom.getImageLoadingListener();
        mJcode = jcode;
        // pics.add()
    }

    @Override
    public int getCount() {
        int count = 0;
        if (datas != null && datas.size() > 0) {
            count = datas.size();
        }
        return count;
    }

    @Override
    public Object getItem(int position) {
        Object object = null;
        if (datas != null && datas.size() > 0) {
            object = datas.get(position);
        }
        return object;
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(final int position, View view, ViewGroup parent) {
        ViewHolder viewHolder = null;
        if (viewHolder == null) {
            view = mLayoutInflater.inflate(R.layout.product_color_list_item, null);
            viewHolder = new ViewHolder();
            viewHolder.picUrlIV = (ImageView) view.findViewById(R.id.iv_product_image);
            viewHolder.nameTV = (TextView) view.findViewById(R.id.tv_product_name);
            viewHolder.priceTV = (TextView) view.findViewById(R.id.tv_product_price);
            viewHolder.descOneTV = (TextView) view.findViewById(R.id.tv_product_activity_description);
            viewHolder.productContainerLL = (RelativeLayout) view.findViewById(R.id.rl_product_container);
            viewHolder.productOperatiorBtn = (Button) view.findViewById(R.id.btn_product_operator);
            viewHolder.fMaBtn = (Button) view.findViewById(R.id.btn_f_buy);
            viewHolder.netTypeTv = (TextView) view.findViewById(R.id.tv_product_netType);
            view.setTag(viewHolder);
        } else {
            viewHolder = (ViewHolder) view.getTag();
        }

        final ProductColorBean productBean = datas.get(position);

        String picURL = productBean.getPic();
        if (!TextUtils.isEmpty(picURL)) {
            ImageLoader imageLoader = ImageLoader.getInstance();
            viewHolder.picUrlIV.setImageDrawable(null);
            imageLoader.displayImage(picURL, viewHolder.picUrlIV, mImageLoadingListener);
        } else {
            viewHolder.picUrlIV.setImageResource(R.drawable.no_picture);
        }
        // viewHolder.picUrlIV.setImageResource(pics[position]);
        final String proModel = productBean.getProModel() == null ? "" : productBean.getProModel();
        String proBrand = productBean.getProBrand() == null ? "" : productBean.getProBrand();
        String proName = productBean.getProName() == null ? "" : productBean.getProName();
        String proColor = productBean.getProColor() == null ? "" : productBean.getProColor();
        String proRom = productBean.getProRom() == null ? "" : productBean.getProRom();
        String proNetype = productBean.getProStandardName() == null ? "" : productBean.getProStandardName();
        if (proNetype == null || "".equals(proNetype)) {
            viewHolder.netTypeTv.setVisibility(View.GONE);
        } else {
            viewHolder.netTypeTv.setVisibility(View.VISIBLE);
        }
        viewHolder.nameTV.setText(proModel + "" + proRom + " " + proColor);
        viewHolder.netTypeTv.setText(proNetype);
        String price = Utils.Money.MoneyToYuan(productBean.getProPrice());
        viewHolder.priceTV.setText("￥" + price);
        String desc = "";
        String tempJcodeTypeString = null;
        String jcodeSellType = productBean.getJcodeSellType();
        //  if (mJcode != null && mJcode.trim().length() > 0) {
        if ("1".equals(jcodeSellType)) {
            tempJcodeTypeString = JCODE_BUY_NOW;
            desc = mContext.getString(R.string.buy);
        } else if ("2".equals(jcodeSellType)) {
            tempJcodeTypeString = JCODE_SELL_OUT;
            desc = mContext.getString(R.string.sell_out);
            viewHolder.fMaBtn.setEnabled(false);
            viewHolder.fMaBtn.setVisibility(View.GONE);
        }
        final String mJcodeType = tempJcodeTypeString;

        String tempTypeString = null;
        String sellType = productBean.getSellType();
        //  } else {      //1:未开放预约,2:立即预约，3：预约已过期，4：未开放购买，5：立即购买，6：已售罄
        if ("1".equals(sellType)) {
            tempTypeString = GER_BOOK_BEFORE;
            desc = mContext.getString(R.string.can_not_book_now);
            viewHolder.productOperatiorBtn.setEnabled(false);
        } else if ("2".equals(sellType)) {
            tempTypeString = GER_BOOK_NOW;
            desc = mContext.getString(R.string.can_book_now);
        } else if ("3".equals(sellType)) {
            tempTypeString = GER_BOOK_AFTER;
            desc = mContext.getString(R.string.can_book_expire);
            viewHolder.productOperatiorBtn.setEnabled(false);
        } else if ("4".equals(sellType)) {
            tempTypeString = GER_BUY_BEFORE;
            desc = mContext.getString(R.string.can_not_buy_now);
            viewHolder.productOperatiorBtn.setEnabled(false);
        } else if ("5".equals(sellType)) {
            tempTypeString = GER_BUY_NOW;
            desc = mContext.getString(R.string.can_buy_now);
        } else if ("6".equals(sellType)) {
            tempTypeString = GER_SELL_OUT;
            desc = mContext.getString(R.string.sell_out);
            viewHolder.productOperatiorBtn.setEnabled(false);
        }
        //  }
        final String mType = tempTypeString;

        viewHolder.productOperatiorBtn.setText(desc);
        viewHolder.descOneTV.setText(desc);
        viewHolder.productOperatiorBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mProductOperatorListener != null) {
                    if (GER_BOOK_NOW.equals(mType)) {
                        mProductOperatorListener.appointment(productBean.getId());
                    } else if (GER_BUY_NOW.equals(mType)) {
                        mProductOperatorListener.gerBuy(position, productBean.getId());
                    }
                } else {
                    ToastUtil.show(R.string.error_product_operator);
                }
            }
        });

        viewHolder.fMaBtn.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                if (mProductOperatorListener != null) {
                    if (JCODE_BUY_NOW.equals(mJcodeType)) {
                        mProductOperatorListener.fMaBuy(position, productBean.getId());
                    }
                }
            }
        });

        // viewHolder.descTwoTV.setText(productBean.getActivityDescription2());
        /*
         * final RelativeLayout productContainerLL = viewHolder.productContainerLL; productContainerLL.setOnClickListener
		 * (new View.OnClickListener() {
		 * 
		 * @Override public void onClick(View v) {
		 * productContainerLL.setBackgroundResource(R.drawable.radiobottom_middle_noline_p); } });
		 */

        return view;
    }

    protected void bindBackground(View view, int i) {
        if (getCount() == 1) {
            view.setBackgroundResource(R.drawable.list_item_single_bg);
            return;
        }
        if (i == 0) {
            view.setBackgroundResource(R.drawable.list_item_top_bg);
            return;
        }
        if (i == -1 + getCount()) {
            view.setBackgroundResource(R.drawable.list_item_bottom_bg);
            return;
        } else {
            view.setBackgroundResource(R.drawable.list_item_middle_bg);
            return;
        }
    }

    public void setOnProductOperatorListener(ProductOperatorListener listener) {
        mProductOperatorListener = listener;
    }

    public static interface ProductOperatorListener {
        void gerBuy(int position, int productId);

        void appointment(int productId);

        void fMaBuy(int position, int productId);
    }

    private class ViewHolder {
        ImageView picUrlIV;
        TextView nameTV;
        TextView priceTV;
        TextView descOneTV;
        RelativeLayout productContainerLL;
        Button productOperatiorBtn;
        Button fMaBtn;
        TextView netTypeTv;
    }
}
