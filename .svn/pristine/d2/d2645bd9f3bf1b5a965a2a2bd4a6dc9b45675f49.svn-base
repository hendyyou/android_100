package cn.digione.yibaic.shop.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.loopj.android.http.RequestParams;

import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AbsListView.OnScrollListener;
import android.widget.AdapterView;
import android.widget.ListView;
import cn.digione.yibaic.shop.R;
import cn.digione.yibaic.shop.acitvity.OrderListActivity;
import cn.digione.yibaic.shop.adapter.OrderListAdapter;
import cn.digione.yibaic.shop.adapter.ProductListAdapter;
import cn.digione.yibaic.shop.bean.JsonPagerEntityBean;
import cn.digione.yibaic.shop.bean.OrderBean;
import cn.digione.yibaic.shop.common.Constants;
import cn.digione.yibaic.shop.http.CustomerJsonHttpResponseHandler;
import cn.digione.yibaic.shop.http.HttpClient;
import cn.digione.yibaic.shop.util.Log;
import cn.digione.yibaic.shop.util.ToastUtil;
import cn.digione.yibaic.shop.util.Utils;

/**
 * 订单列表界面
 * 
 * @author Administrator
 * 
 */
public class OrderListFragment extends BaseFragment {

	private static final String TAG = "OrderListFragment";
	private String mAction;
	private OrderListAdapter mAdapter;
	private android.widget.AdapterView.OnItemClickListener mItemClickListener;
	private ListView mListView;
	private ArrayList<OrderBean> orderList;
	private OnScrollListener mOnScrollListener;
	private int mType;
	private CustomerJsonHttpResponseHandler<JsonPagerEntityBean<OrderBean>> orderListHttpResponseHandler;

	public OrderListFragment() {

		mItemClickListener = new android.widget.AdapterView.OnItemClickListener() {

			public void onItemClick(AdapterView adapterview, View view, int i, long l) {
				Bundle bundle = new Bundle();
				bundle.putString("orderId", ((OrderBean) adapterview.getItemAtPosition(i)).getOrderId());
				((OrderListActivity) getActivity()).showFragment("order_detail_fragment", bundle, true);
			}

		};

		mOnScrollListener = new OnScrollListener() {

			@Override
			public void onScrollStateChanged(AbsListView view, int scrollState) {
				// TODO Auto-generated method stub
				// 当不滚动时
				if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
					// 判断是否滚动到底部
					if (view.getLastVisiblePosition() == view.getCount() - 1) {
						if (mCurrentPage < mPageCount && mPageCount != 1 && orderList != null && orderList.size() > 0) {
							mSelectposition = orderList.size() - 1;
							// int pageNumber = mCurrentPage++;
							++mCurrentPage;
							Log.i("mSelectposition=" + mSelectposition + ",CurrentPage=" + mCurrentPage);
							// requestHttp(pageNumber, mPageSize);
							requestHttp();
						}
					}
				}
			}

			@Override
			public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {
				// TODO Auto-generated method stub

			}
		};
	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		orderListHttpResponseHandler = new CustomerJsonHttpResponseHandler<JsonPagerEntityBean<OrderBean>>(getActivity()) {

			@Override
			public void processCallSuccess(JsonPagerEntityBean<OrderBean> outBean, String msg) {
				// TODO Auto-generated method stub
				if (outBean != null && outBean.getResultList().size() > 0) {
					if (orderList == null) {
						orderList = new ArrayList<OrderBean>();
					}
					Boolean isEmpty = orderList.isEmpty();
					if (orderList != null && !isEmpty && mCurrentPage == 1) {
						orderList.clear();
					}
					mPageCount = outBean.getPageCount();
					mPageSize = outBean.getPageSize();
					// mCurrentPage = outBean.getCurrentPage();

					orderList.addAll(outBean.getResultList());

					mAdapter = null;
					mAdapter = new OrderListAdapter(getActivity(), orderList);
					mListView.setAdapter(mAdapter);
					mListView.setSelection(mSelectposition);
				}
			}
		};

	}

	private void requestHttp() {
		if (Utils.Network.isHasNetwork(getActivity())) {
			HttpClient client = HttpClient.getInstall(getActivity());
			String url = Constants.NetWorkRequest.QUERY_ORDER_LIST;
			Map<String, String> map = new HashMap<String, String>();
			map.put("searchOrderVO.pageSize", String.valueOf(mPageSize));
			map.put("searchOrderVO.currentPage", String.valueOf(mCurrentPage));
			RequestParams params = new RequestParams(map);
			client.postAsync(url, params, orderListHttpResponseHandler);
		} else {
			ToastUtil.show(getActivity(), getString(R.string.msg_networkfail), ToastUtil.LENGTH_SHORT);
		}
	}

	public View onCreateView(LayoutInflater layoutinflater, ViewGroup viewgroup, Bundle bundle) {
		super.onCreateView(layoutinflater, viewgroup, bundle);
		View view;
		view = layoutinflater.inflate(R.layout.order_list_fragment, viewgroup, false);
		mListView = (ListView) view.findViewById(R.id.order_listview);
		requestHttp();
		mListView.setOnScrollListener(mOnScrollListener);
		mListView.setOnItemClickListener(mItemClickListener);

		return view;

	}

	public void setAction(String s) {
		mAction = s;
	}

	public void setType(int s) {
		mType = s;
	}

}