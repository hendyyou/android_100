package cn.digione.yibaic.shop.ui;

import android.app.ProgressDialog;
import android.os.AsyncTask;
import android.os.Bundle;
import android.text.Editable;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import cn.digione.yibaic.shop.R;
import cn.digione.yibaic.shop.bean.*;
import cn.digione.yibaic.shop.common.Constants;
import cn.digione.yibaic.shop.http.CustomerJsonHttpResponseHandler;
import cn.digione.yibaic.shop.http.HttpClient;
import cn.digione.yibaic.shop.util.Log;
import cn.digione.yibaic.shop.util.MD5;
import cn.digione.yibaic.shop.util.ToastUtil;
import cn.digione.yibaic.shop.util.Utils;
import com.loopj.android.http.RequestParams;
import com.tencent.mm.sdk.modelpay.PayReq;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.WXAPIFactory;
import org.apache.http.NameValuePair;
import org.apache.http.client.utils.URLEncodedUtils;
import org.apache.http.message.BasicNameValuePair;
import org.json.JSONObject;

import java.util.LinkedList;
import java.util.List;
import java.util.Random;

/**
 * Created with IntelliJ IDEA.
 * User: Simpson
 * Date: 2014/4/9
 * Time: 14:56
 */
public class OrderPayFragment extends StepsFragment {

    private IWXAPI api;
    private Button payBtn;
    private TextView tvJiaCoinRemain;
    private TextView tvOrderFeeRemain;
    private EditText evCoupon;
    private Button btnCoupon;
    private TextView tvCouponUsed;
    private EditText evJiaCoin;
    private Button btnJiaCoin;
    private TextView tvJiaCoinUsed;
    private boolean isUsedCoupon;
    private boolean isUsedJiaCoin;
    private OrderCouponJiaCoinOutBean orderCouponJiaCoinOutBean;
    private OrderDetailBean orderDetailBean;
    private long userJiaCoinRemain;
    private boolean isSentReq;

    private CustomerJsonHttpResponseHandler<JiaCoinBean> jiaCoinSearchResponseHandler;
    private CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean> useConCodeResponseHandler;
    private CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean> cancelConCodeResponseHandler;
    private CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean> useJiaCoinResponseHandler;
    private CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean> cancelJiaCoinResponseHandler;
    private CustomerJsonHttpResponseHandler<JsonNoneOutBean> payForJiaMoneyOrConCodeResponseHandler;
    private CustomerJsonHttpResponseHandler<TenpayReqBean> toPayForAppResponseHandler;

    private String getUsedCoupon() {
        Editable editable = evCoupon.getText();
        if (null != editable) {
            return editable.toString().trim();
        }
        return "";
    }

    private String getUsedJiaCoin() {
        Editable editable = evJiaCoin.getText();
        if (null != editable) {
            return editable.toString().trim();
        }
        return "";
    }

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);

        api = WXAPIFactory.createWXAPI(getActivity(), Constants.WeiXinPay.APP_ID);
        api.registerApp(Constants.WeiXinPay.APP_ID);

        jiaCoinSearchResponseHandler = new CustomerJsonHttpResponseHandler<JiaCoinBean>(getActivity()) {
            @Override
            public void processCallSuccess(JiaCoinBean outBean, String msg) {
                if (null == outBean || outBean.getBalance() == 0) {
                    // 没有加币
                    userJiaCoinRemain = 0;
                    btnJiaCoin.setEnabled(false);
                } else {
                    // 有加币
                    userJiaCoinRemain = outBean.getBalance();
                    btnJiaCoin.setEnabled(true);
                }
                tvJiaCoinRemain.setText(getString(R.string.order_pay_jia_coin_remain, userJiaCoinRemain / 100));
            }
        };

        useConCodeResponseHandler = new CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean>(getActivity()) {
            @Override
            public void processCallSuccess(OrderCouponJiaCoinOutBean outBean, String msg) {
                isUsedCoupon = true;
                orderCouponJiaCoinOutBean = outBean;
                btnCoupon.setText(R.string.order_pay_coupon_btn_cancel);
                tvOrderFeeRemain.setText(getString(R.string.money_format, Utils.Money.MoneyToYuan(outBean.getOrderAmount())));
                tvCouponUsed.setVisibility(View.VISIBLE);
                tvCouponUsed.setText(
                        getString(R.string.order_pay_coupon_used, Utils.Money.MoneyToYuan(outBean.getPreferentialAmt())));
                setCouponAndJiaCoinControl();
            }
        };

        cancelConCodeResponseHandler = new CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean>(getActivity()) {
            @Override
            public void processCallSuccess(OrderCouponJiaCoinOutBean outBean, String msg) {
                isUsedCoupon = false;
                orderCouponJiaCoinOutBean = outBean;
                setCouponAndJiaCoinControl();
                btnCoupon.setText(R.string.order_pay_coupon_btn_use);
                tvOrderFeeRemain.setText(getString(R.string.money_format, Utils.Money.MoneyToYuan(outBean.getOrderAmount())));
                tvCouponUsed.setVisibility(View.GONE);
            }
        };

        useJiaCoinResponseHandler = new CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean>(getActivity()) {
            @Override
            public void processCallSuccess(OrderCouponJiaCoinOutBean outBean, String msg) {
                isUsedJiaCoin = true;
                orderCouponJiaCoinOutBean = outBean;
                setCouponAndJiaCoinControl();
                btnJiaCoin.setText(R.string.order_pay_jia_coin_btn_cancel);
                tvOrderFeeRemain.setText(getString(R.string.money_format, Utils.Money.MoneyToYuan(outBean.getOrderAmount())));
                tvJiaCoinUsed.setVisibility(View.VISIBLE);
                tvJiaCoinUsed.setText(getString(R.string.order_pay_jia_coin_used, Utils.Money.MoneyToYuan(outBean.getJiaCurrencyAmt())));
            }
        };

        cancelJiaCoinResponseHandler = new CustomerJsonHttpResponseHandler<OrderCouponJiaCoinOutBean>(getActivity()) {
            @Override
            public void processCallSuccess(OrderCouponJiaCoinOutBean outBean, String msg) {
                isUsedJiaCoin = false;
                orderCouponJiaCoinOutBean = outBean;
                setCouponAndJiaCoinControl();
                btnJiaCoin.setText(R.string.order_pay_jia_coin_btn_use);
                tvOrderFeeRemain.setText(getString(R.string.money_format, Utils.Money.MoneyToYuan(outBean.getOrderAmount())));
                tvJiaCoinUsed.setVisibility(View.GONE);
            }
        };


        payForJiaMoneyOrConCodeResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getActivity()) {
            @Override
            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {
                ToastUtil.show(getActivity(), msg);
                Utils.System.popBackStack(getActivity());
            }
        };

        toPayForAppResponseHandler = new CustomerJsonHttpResponseHandler<TenpayReqBean>(getActivity()) {
            @Override
            public void processCallSuccess(TenpayReqBean outBean, String msg) {
                PayReq req = new PayReq();
                req.appId = outBean.getAppId();
                req.partnerId = outBean.getPartnerId();
                req.prepayId = outBean.getPrepayId();
                req.nonceStr = outBean.getNonceStr();
                req.timeStamp = outBean.getTimeStamp();
                req.packageValue = outBean.getPackageValue();
                req.sign = outBean.getSign();

                // 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信
                api.sendReq(req);
            }
        };
    }

    private void setCouponAndJiaCoinControl() {
        if (isUsedCoupon) {
            evCoupon.setEnabled(false);
            btnCoupon.setEnabled(true);
        } else {
            if (orderCouponJiaCoinOutBean.getOrderAmount() == 0) {
                evCoupon.setEnabled(false);
                btnCoupon.setEnabled(false);
            } else {
                evCoupon.setEnabled(true);
                btnCoupon.setEnabled(true);
            }
        }
        if (isUsedJiaCoin) {
            evJiaCoin.setEnabled(false);
            btnJiaCoin.setEnabled(true);
        } else {
            if (orderCouponJiaCoinOutBean.getOrderAmount() == 0) {
                evJiaCoin.setEnabled(false);
                btnJiaCoin.setEnabled(false);
            } else {
                evJiaCoin.setEnabled(true);
                btnJiaCoin.setEnabled(true);
            }
        }

    }

    @Override
    public View onCreateView(LayoutInflater layoutinflater, ViewGroup viewgroup, Bundle bundle) {
        super.onCreateView(layoutinflater, viewgroup, bundle);

        View view = layoutinflater.inflate(R.layout.order_pay_fragment, viewgroup, false);
        if (null == view) {
            return null;
        }
        Bundle argBundle = getArguments();
        if (null == argBundle) {
            ToastUtil.show(getActivity(), getString(R.string.error_unknown, "没有传入订单信息"));
            return null;
        }
        orderDetailBean = (OrderDetailBean) argBundle.getSerializable(Constants.ArgName.UI.OrderPay.ORDER_DETAIL_BEAN);
        if (null == orderDetailBean) {
            ToastUtil.show(getActivity(), getString(R.string.error_unknown, "没有传入订单信息"));
            return null;
        }
        orderCouponJiaCoinOutBean = new OrderCouponJiaCoinOutBean(0L, 0L, orderDetailBean.getOrderAmount());

        isUsedCoupon = false;
        isUsedJiaCoin = false;
        isSentReq = false;

        TextView tvOrderNo = (TextView) view.findViewById(R.id.tv_order_pay_info_order_no);
        tvOrderNo.setText(orderDetailBean.getOrderNo());

        tvJiaCoinRemain = (TextView) view.findViewById(R.id.tv_order_pay_jia_coin_remain);
        tvOrderFeeRemain = (TextView) view.findViewById(R.id.tv_order_pay_fee);
        tvOrderFeeRemain.setText(getString(R.string.money_format, Utils.Money.MoneyToYuan(orderDetailBean.getOrderAmount())));

        evCoupon = (EditText) view.findViewById(R.id.ev_order_pay_coupon);
        btnCoupon = (Button) view.findViewById(R.id.btn_order_pay_coupon);
        tvCouponUsed = (TextView) view.findViewById(R.id.tv_order_pay_coupon_used);
        tvCouponUsed.setVisibility(View.GONE);

        evJiaCoin = (EditText) view.findViewById(R.id.ev_order_pay_jia_coin);
        btnJiaCoin = (Button) view.findViewById(R.id.btn_order_pay_jia_coin);
        tvJiaCoinUsed = (TextView) view.findViewById(R.id.tv_order_pay_jia_coin_used);
        tvJiaCoinUsed.setVisibility(View.GONE);

        btnJiaCoin.setEnabled(false);
        tvJiaCoinRemain.setText(getString(R.string.order_pay_jia_coin_remain, 0));

        payBtn = (Button) view.findViewById(R.id.btn_order_pay_go_to_pay);
        payBtn.setOnClickListener(new View.OnClickListener() {

            @Override
            public void onClick(View v) {
                if (orderCouponJiaCoinOutBean.getOrderAmount() == 0) {
                    // 优惠券和加币完成支付
                    RequestParams params = new RequestParams();
                    params.put(Constants.ArgName.Request.PayForJiaCoinOrCoupon.ORDER_ID, orderDetailBean.getOrderId());
                    if (isUsedJiaCoin) {
                        params.put(Constants.ArgName.Request.PayForJiaCoinOrCoupon.JIA_CURRENCY_AMT,
                                   orderCouponJiaCoinOutBean.getJiaCurrencyAmt().toString());
                    }
                    if (isUsedCoupon) {
                        params.put(Constants.ArgName.Request.PayForJiaCoinOrCoupon.CON_CODE, getUsedCoupon());
                        params.put(Constants.ArgName.Request.PayForJiaCoinOrCoupon.PREFERENTIAL_AMT,
                                   orderCouponJiaCoinOutBean.getPreferentialAmt().toString());
                    }
                    HttpClient httpClient = HttpClient.getInstall(getActivity());
                    httpClient.postAsync(Constants.NetWorkRequest.PAY_FOR_JIA_MONEY_OR_COUPON_URL_051, params,
                                         payForJiaMoneyOrConCodeResponseHandler);
                } else {
                    // 优惠券和加币部分支付，微信完成支付
                    isSentReq = false;
                    if (!api.isWXAppSupportAPI()) {
                        ToastUtil.show(getActivity(), getString(R.string.not_support_wx_pay));
                        return;
                    }
                    RequestParams params = new RequestParams();
                    params.put(Constants.ArgName.Request.ToPayForApp.ORDER_ID, orderDetailBean.getOrderId());
                    if (isUsedJiaCoin) {
                        params.put(Constants.ArgName.Request.ToPayForApp.JIA_CURRENCY_AMT,
                                   orderCouponJiaCoinOutBean.getJiaCurrencyAmt().toString());
                    }
                    if (isUsedCoupon) {
                        params.put(Constants.ArgName.Request.ToPayForApp.CON_CODE, getUsedCoupon());
                        params.put(Constants.ArgName.Request.ToPayForApp.PREFERENTIAL_AMT,
                                   orderCouponJiaCoinOutBean.getPreferentialAmt().toString());
                    }
                    HttpClient httpClient = HttpClient.getInstall(getActivity());
                    httpClient.postAsync(Constants.NetWorkRequest.TO_PAY_FOR_APP_URL_052, params,
                                         toPayForAppResponseHandler);

                    //new GetAccessTokenTask().execute();
                }
            }
        });

        btnCoupon.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                RequestParams params = new RequestParams();
                params.put(Constants.ArgName.Request.UseOrCancelCoupon.ORDER_ID, orderDetailBean.getOrderId());
                if (isUsedJiaCoin) {
                    params.put(Constants.ArgName.Request.UseOrCancelCoupon.JIA_CURRENCY_AMT, getUsedJiaCoin());
                }
                HttpClient httpClient = HttpClient.getInstall(getActivity());
                if (isUsedCoupon) {
                    // 取消使用优惠券
                    httpClient.postAsync(Constants.NetWorkRequest.CANCEL_CON_CODE_URL_012, params, cancelConCodeResponseHandler);
                } else {
                    // 使用优惠券
                    String coupon = getUsedCoupon();
                    if (TextUtils.isEmpty(coupon)) {
                        evCoupon.setError(Utils.getErrorSpanString(R.string.error_empty_coupon, getActivity()));
                        evCoupon.requestFocus();
                        return;
                    }
                    params.put(Constants.ArgName.Request.UseOrCancelCoupon.CON_CODE, coupon);
                    httpClient.postAsync(Constants.NetWorkRequest.USE_CON_CODE_URL_039, params, useConCodeResponseHandler);
                }
            }
        });

        btnJiaCoin.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View v) {
                RequestParams params = new RequestParams();
                params.put(Constants.ArgName.Request.UseOrCancelJiaCoin.ORDER_ID, orderDetailBean.getOrderId());
                if (isUsedCoupon) {
                    params.put(Constants.ArgName.Request.UseOrCancelJiaCoin.CON_CODE, getUsedCoupon());
                }
                HttpClient httpClient = HttpClient.getInstall(getActivity());
                if (isUsedJiaCoin) {
                    // 取消使用加币
                    httpClient.postAsync(Constants.NetWorkRequest.CANCEL_JIA_MONEY_URL_041, params, cancelJiaCoinResponseHandler);
                } else {
                    // 使用加币
                    String jiaCoin = getUsedJiaCoin();
                    if (TextUtils.isEmpty(jiaCoin) || "0".equals(jiaCoin.trim())) {
                        evJiaCoin.setError(Utils.getErrorSpanString(R.string.error_empty_jia_coin, getActivity()));
                        evJiaCoin.requestFocus();
                    } else{
                        Integer inputJiaCoin = Integer.parseInt(jiaCoin) * 100;
                        if (inputJiaCoin > userJiaCoinRemain) {
                            evJiaCoin.setError(Utils.getErrorSpanString(R.string.error_exceed_jia_coin, getActivity()));
                            evJiaCoin.requestFocus();
                            return;
                        }
                        params.put(Constants.ArgName.Request.UseOrCancelJiaCoin.JIA_CURRENCY_USED_COUNT, jiaCoin);
                        httpClient.postAsync(Constants.NetWorkRequest.USE_JIA_MONEY_URL_040, params, useJiaCoinResponseHandler);
                    }
                }
            }
        });

        HttpClient httpClient = HttpClient.getInstall(getActivity());
        httpClient.postAsync(Constants.NetWorkRequest.JIA_BALANCE_URL_028, null, jiaCoinSearchResponseHandler);

        return view;
    }

    @Override
    public void onResume() {
        super.onResume();
        if (isSentReq) {
            Utils.System.popBackStack(getActivity());
        }
    }

    private String genPackage(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();

        for (NameValuePair param : params) {
            sb.append(param.getName());
            sb.append('=');
            sb.append(param.getValue());
            sb.append('&');
        }
        sb.append("key=");
        sb.append(Constants.WeiXinPay.PARTNER_KEY); // 注意：不能hardcode在客户端，建议genPackage这个过程都由服务器端完成

        // 进行md5摘要前，params内容为原始内容，未经过url encode处理
        String packageSign = MD5.getMessageDigest(sb.toString().getBytes()).toUpperCase();

        return URLEncodedUtils.format(params, "utf-8") + "&sign=" + packageSign;
    }

    private class GetAccessTokenTask extends AsyncTask<Void, Void, GetAccessTokenResult> {

        private ProgressDialog dialog;

        @Override
        protected void onPreExecute() {
            dialog = ProgressDialog
                    .show(getActivity(), getString(R.string.app_tip), getString(R.string.getting_access_token));
        }

        @Override
        protected void onPostExecute(GetAccessTokenResult result) {
            if (dialog != null) {
                dialog.dismiss();
            }

            if (result.localRetCode == LocalRetCode.ERR_OK) {
                ToastUtil.show(getActivity(), R.string.get_access_token_succeed);
                Log.d("onPostExecute, accessToken = " + result.accessToken);

                GetPrepayIdTask getPrepayId = new GetPrepayIdTask(result.accessToken);
                getPrepayId.execute();
            } else {
                ToastUtil.show(getActivity(), getString(R.string.get_access_token_fail, result.localRetCode.name()));
            }
        }

        @Override
        protected GetAccessTokenResult doInBackground(Void... params) {
            GetAccessTokenResult result = new GetAccessTokenResult();

            String url = getString(R.string.wx_pay_get_token, Constants.WeiXinPay.APP_ID, Constants.WeiXinPay.APP_SECRET);
            Log.d("get access token, url = " + url);

            byte[] buf = Utils.Http.httpGet(url);
            if (buf == null || buf.length == 0) {
                result.localRetCode = LocalRetCode.ERR_HTTP;
                return result;
            }

            String content = new String(buf);
            result.parseFrom(content);
            return result;
        }
    }

    private class GetPrepayIdTask extends AsyncTask<Void, Void, GetPrepayIdResult> {

        private ProgressDialog dialog;
        private String accessToken;

        public GetPrepayIdTask(String accessToken) {
            this.accessToken = accessToken;
        }

        @Override
        protected void onPreExecute() {
            dialog = ProgressDialog.show(getActivity(), getString(R.string.app_tip), getString(R.string.getting_prepay_id));
        }

        @Override
        protected void onPostExecute(GetPrepayIdResult result) {
            if (dialog != null) {
                dialog.dismiss();
            }

            if (result.localRetCode == LocalRetCode.ERR_OK) {
                ToastUtil.show(getActivity(), R.string.get_prepay_id_succeed);
                sendPayReq(result);
                isSentReq = true;
            } else {
                ToastUtil.show(getActivity(), getString(R.string.get_prepay_id_fail, result.errMsg));
            }
        }

        @Override
        protected void onCancelled() {
            super.onCancelled();
        }

        @Override
        protected GetPrepayIdResult doInBackground(Void... params) {

            String url = getString(R.string.wx_pay_gen_prepay, accessToken);
            String entity = genProductArgs();

            Log.d("doInBackground, url = " + url);
            Log.d("doInBackground, entity = " + entity);

            GetPrepayIdResult result = new GetPrepayIdResult();

            byte[] buf = Utils.Http.httpPost(url, entity);
            if (buf == null || buf.length == 0) {
                result.localRetCode = LocalRetCode.ERR_HTTP;
                return result;
            }

            String content = new String(buf);
            Log.d("doInBackground, content = " + content);
            result.parseFrom(content);
            return result;
        }
    }

    private static enum LocalRetCode {
        ERR_OK, ERR_HTTP, ERR_JSON, ERR_OTHER
    }

    private static class GetAccessTokenResult {

        public LocalRetCode localRetCode = LocalRetCode.ERR_OTHER;
        public String accessToken;
        public int expiresIn;
        public int errCode;
        public String errMsg;

        public void parseFrom(String content) {

            if (content == null || content.length() <= 0) {
                Log.e("GetAccessTokenResult parseFrom fail, content is null");
                localRetCode = LocalRetCode.ERR_JSON;
                return;
            }

            try {
                JSONObject json = new JSONObject(content);
                if (json.has("access_token")) { // success case
                    accessToken = json.getString("access_token");
                    expiresIn = json.getInt("expires_in");
                    localRetCode = LocalRetCode.ERR_OK;
                } else {
                    errCode = json.getInt("errcode");
                    errMsg = json.getString("errmsg");
                    localRetCode = LocalRetCode.ERR_JSON;
                }

            } catch (Exception e) {
                localRetCode = LocalRetCode.ERR_JSON;
            }
        }
    }

    private static class GetPrepayIdResult {

        public LocalRetCode localRetCode = LocalRetCode.ERR_OTHER;
        public String prepayId;
        public int errCode;
        public String errMsg;

        public void parseFrom(String content) {

            if (content == null || content.length() <= 0) {
                Log.e("GetPrepayIdResult parseFrom fail, content is null");
                localRetCode = LocalRetCode.ERR_JSON;
                return;
            }

            try {
                JSONObject json = new JSONObject(content);
                if (json.has("prepayid")) { // success case
                    prepayId = json.getString("prepayid");
                    localRetCode = LocalRetCode.ERR_OK;
                } else {
                    localRetCode = LocalRetCode.ERR_JSON;
                }

                errCode = json.getInt("errcode");
                errMsg = json.getString("errmsg");

            } catch (Exception e) {
                localRetCode = LocalRetCode.ERR_JSON;
            }
        }
    }

    private String genNonceStr() {
        Random random = new Random();
        return MD5.getMessageDigest(String.valueOf(random.nextInt(10000)).getBytes());
    }

    private long genTimeStamp() {
        return System.currentTimeMillis() / 1000;
    }

    /**
     * 建议 traceid 字段包含用户信息及订单信息，方便后续对订单状态的查询和跟踪
     */
    private String getTraceId() {
        return "100jia_" + orderDetailBean.getOrderId();
    }

    /**
     * 注意：商户系统内部的订单号,32个字符内、可包含字母,确保在商户系统唯一
     */
    private String genOutTradNo() {
        return orderDetailBean.getOrderNo();
    }

    private long timeStamp;
    private String nonceStr, packageValue;

    private String genSign(List<NameValuePair> params) {
        StringBuilder sb = new StringBuilder();

        int i = 0;
        for (; i < params.size() - 1; i++) {
            sb.append(params.get(i).getName());
            sb.append('=');
            sb.append(params.get(i).getValue());
            sb.append('&');
        }
        sb.append(params.get(i).getName());
        sb.append('=');
        sb.append(params.get(i).getValue());

        String sha1 = Utils.Security.sha1(sb.toString());
        Log.d("genSign, sha1 = " + sha1);
        return sha1;
    }

    private String genProductArgs() {
        JSONObject json = new JSONObject();

        try {
            String traceId = getTraceId();  // traceId 由开发者自定义，可用于订单的查询与跟踪，建议根据支付用户信息生成此id
            nonceStr = genNonceStr();

            String usedCoupon = "";
            if (isUsedCoupon) {
                usedCoupon = getUsedCoupon();
            }
            String userId = Utils.Preference.getStringPref(getActivity(), Constants.DataFile.DefaultKey.USER_ID, "");
            String attach = getString(R.string.order_pay_attach, usedCoupon, orderCouponJiaCoinOutBean.getPreferentialAmt(),
                                      orderCouponJiaCoinOutBean.getJiaCurrencyAmt(), userId);
            List<NameValuePair> packageParams = new LinkedList<NameValuePair>();
            packageParams.add(new BasicNameValuePair("attach", attach));
            packageParams.add(new BasicNameValuePair("bank_type", "WX"));
            packageParams.add(new BasicNameValuePair("body", "100+商城商品"));
            packageParams.add(new BasicNameValuePair("fee_type", "1"));
            packageParams.add(new BasicNameValuePair("input_charset", "UTF-8"));
            packageParams.add(new BasicNameValuePair("notify_url", Constants.WeiXinPay.NOTIFY_URL));
            packageParams.add(new BasicNameValuePair("out_trade_no", genOutTradNo()));
            packageParams.add(new BasicNameValuePair("partner", Constants.WeiXinPay.PARTNER_ID));
            packageParams.add(new BasicNameValuePair("spbill_create_ip", Utils.Network.getLocalIpAddress()));
            packageParams.add(new BasicNameValuePair("total_fee", orderCouponJiaCoinOutBean.getOrderAmount().toString()));
            packageValue = genPackage(packageParams);

            timeStamp = genTimeStamp();

            List<NameValuePair> signParams = new LinkedList<NameValuePair>();
            signParams.add(new BasicNameValuePair("appid", Constants.WeiXinPay.APP_ID));
            signParams.add(new BasicNameValuePair("appkey", Constants.WeiXinPay.APP_KEY));
            signParams.add(new BasicNameValuePair("noncestr", nonceStr));
            signParams.add(new BasicNameValuePair("package", packageValue));
            signParams.add(new BasicNameValuePair("timestamp", String.valueOf(timeStamp)));
            signParams.add(new BasicNameValuePair("traceid", traceId));

            json.put("appid", Constants.WeiXinPay.APP_ID);
            json.put("traceid", traceId);
            json.put("noncestr", nonceStr);
            json.put("package", packageValue);
            json.put("timestamp", timeStamp);
            json.put("app_signature", genSign(signParams));
            json.put("sign_method", "sha1");
        } catch (Exception e) {
            Log.e("genProductArgs fail, ex = " + e.getMessage());
            return null;
        }

        return json.toString();
    }

    private void sendPayReq(GetPrepayIdResult result) {

        PayReq req = new PayReq();
        req.appId = Constants.WeiXinPay.APP_ID;
        req.partnerId = Constants.WeiXinPay.PARTNER_ID;
        req.prepayId = result.prepayId;
        req.nonceStr = nonceStr;
        req.timeStamp = String.valueOf(timeStamp);
        req.packageValue = "Sign=WXPay";

        List<NameValuePair> signParams = new LinkedList<NameValuePair>();
        signParams.add(new BasicNameValuePair("appid", req.appId));
        signParams.add(new BasicNameValuePair("appkey", Constants.WeiXinPay.APP_KEY));
        signParams.add(new BasicNameValuePair("noncestr", req.nonceStr));
        signParams.add(new BasicNameValuePair("package", req.packageValue));
        signParams.add(new BasicNameValuePair("partnerid", req.partnerId));
        signParams.add(new BasicNameValuePair("prepayid", req.prepayId));
        signParams.add(new BasicNameValuePair("timestamp", req.timeStamp));
        req.sign = genSign(signParams);

        // 在支付之前，如果应用没有注册到微信，应该先调用IWXMsg.registerApp将应用注册到微信
        api.sendReq(req);
    }
}
