package cn.digione.yibaic.shop.ui;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import android.content.Intent;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AbsListView;
import android.widget.AdapterView;
import android.widget.Button;
import android.widget.ListView;
import cn.digione.yibaic.shop.R;
import cn.digione.yibaic.shop.ShopApp;
import cn.digione.yibaic.shop.acitvity.ProductListActivity;
import cn.digione.yibaic.shop.acitvity.ShoppingActivity;
import cn.digione.yibaic.shop.adapter.ProductColorAdapter;
import cn.digione.yibaic.shop.bean.JsonNoneOutBean;
import cn.digione.yibaic.shop.bean.JsonPagerEntityBean;
import cn.digione.yibaic.shop.bean.ProductColorBean;
import cn.digione.yibaic.shop.common.Constants;
import cn.digione.yibaic.shop.http.CustomerJsonHttpResponseHandler;
import cn.digione.yibaic.shop.http.HttpClient;
import cn.digione.yibaic.shop.util.Log;
import cn.digione.yibaic.shop.util.ToastUtil;

import com.loopj.android.http.RequestParams;

public class ProductColorFragment extends BaseFragment<JsonPagerEntityBean<ProductColorBean>> implements
		AbsListView.OnScrollListener {
	private ProductColorAdapter mColorSelectAdapter;
	private List<ProductColorBean> mDatas = null;
	private ListView mProductListLV;
	private Button submitBtn;
	private String mProModel;
	private String mProRom;
	private int mCategoryId;
	private String mCategoryName;
	private int mSelectedItemPosition = -1;
	private static final int MAX_PAGE_SIZE = 999;
	private CustomerJsonHttpResponseHandler<JsonNoneOutBean> mAddShopCartHttpResponseHandler;
	private CustomerJsonHttpResponseHandler<JsonNoneOutBean> mAppointMentHttpResponseHandler;

	public ProductListActivity getParent() {
		return (ProductListActivity) getActivity();
	}

	public void requestHttp(String url, Map<String, String> map, CustomerJsonHttpResponseHandler httpResponseHandler) {
		HttpClient client = HttpClient.getInstall(getParent());
		RequestParams params = new RequestParams(map);
		client.postAsync(url, params, httpResponseHandler);
	}

	private void productColorSelectRequestHttp() {
		String url = Constants.NetWorkRequest.PRODUCT_COLOR_LIST_URL_003;
		Map<String, String> map = new HashMap<String, String>();
		map.put("searchProductVO.proModel", mProModel);
		map.put("searchProductVO.pageSize", MAX_PAGE_SIZE + "");
		map.put("searchProductVO.currentPage", 1 + "");
		requestHttp(url, map, mCustomerJsonHttpResponseHandler);
	}

	private void addShopCartRequestHttp(String productId, String num) {
		String url = Constants.NetWorkRequest.SHOPPING_ADD_CART_URL_031;
		Map<String, String> map = new HashMap<String, String>();
		map.put("productId", productId);
		map.put("num", num);
		requestHttp(url, map, mAddShopCartHttpResponseHandler);
	}

	private void submitAppointment(String productId, String appointmentId) {
		String url = Constants.NetWorkRequest.CREATE_USER_APPOINTMENT_URL_041;
		Map<String, String> map = new HashMap<String, String>();
		map.put("searchAppointmentVO.proID", productId);
		map.put("searchAppointmentVO.appointmentID", appointmentId);

		requestHttp(url, map, mAppointMentHttpResponseHandler);

	}

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		mCustomerJsonHttpResponseHandler = new CustomerJsonHttpResponseHandler<JsonPagerEntityBean<ProductColorBean>>(
				getParent(), false) {
			@Override
			public void processCallSuccess(final JsonPagerEntityBean<ProductColorBean> outBean, final String msg) {
				if (outBean != null && outBean.getResultList().size() > 0) {
					if (mDatas == null) {
						mDatas = new ArrayList<ProductColorBean>();
					}
					if (mDatas != null && mDatas.isEmpty() && mCurrentPage == 1) {
						mDatas.clear();
					}
					mPageCount = outBean.getPageCount();
					mPageSize = outBean.getPageSize();
					mDatas.addAll(outBean.getResultList());
					mProductListLV.setSelection(mSelectposition);
					mColorSelectAdapter = null;
					mColorSelectAdapter = new ProductColorAdapter(getParent(), mDatas);
					mProductListLV.setAdapter(mColorSelectAdapter);
					// mProductListLV.setOnScrollListener(ProductColorFragment.this);
					ShopApp.setListViewHeightBasedOnChildren(mProductListLV);
				}
			}
		};
		mAddShopCartHttpResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getParent(), false) {
			@Override
			public void processCallSuccess(JsonNoneOutBean outBean, String msg) {
				Intent intent = new Intent(getActivity(), ShoppingActivity.class);
				startActivity(intent);
			}
		};

		mAppointMentHttpResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getParent(), false) {
			@Override
			public void processCallSuccess(JsonNoneOutBean outBean, String msg) {
				ToastUtil.show(msg);
				getActivity().finish();
			}
		};

	}

	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		super.onCreateView(inflater, container, savedInstanceState);
		Bundle args = getArguments();
		if (args != null) {
			mProModel = args.getString("select_product_model");
			getParent().setTitle(mProModel);
		}
		productColorSelectRequestHttp();
		View view = inflater.inflate(R.layout.product_color_list_fragment, container, false);
		mProductListLV = (ListView) view.findViewById(R.id.lv_product_list);
		mProductListLV.setOnItemClickListener(new AdapterView.OnItemClickListener() {
			@Override
			public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
				mSelectedItemPosition = position;
			}
		});

		mProductListLV.setOnScrollListener(this);

		submitBtn = (Button) view.findViewById(R.id.btn_submit);
		submitBtn.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (mSelectedItemPosition >= 0) {
					// 提交到服务器的数据库中，然后
					// 可购买
					ProductColorBean colorBean = mDatas.get(mSelectedItemPosition);
					// 可购买
					if ("1".equals(colorBean.getSellType())) {
						ToastUtil.show("product id =" + colorBean.getId());
						addShopCartRequestHttp(String.valueOf(colorBean.getId()), "1");
						// ToastUtil.show(mSelectedItemPosition + ":" + colorBean.getProName());
						// 可预约
					} else if ("0".equals(colorBean.getSellType())) {
						submitAppointment(String.valueOf(colorBean.getId()), colorBean.getAppointmentId());
					}
				} else {
					ToastUtil.show(R.string.please_choose_product);
				}
			}
		});
		return view;
	}

	@Override
	public void onScrollStateChanged(AbsListView view, int scrollState) {
		// 当不滚动时
		if (scrollState == AbsListView.OnScrollListener.SCROLL_STATE_IDLE) {
			// 判断是否滚动到底部
			if (view.getLastVisiblePosition() == view.getCount() - 1) {
				if (mCurrentPage < mPageCount && mPageCount != 1 && mDatas != null && mDatas.size() > 0) {
					mSelectposition = mDatas.size() - 1;
					// int pageNumber = mCurrentPage++;
					++mCurrentPage;
					Log.i("mSelectposition=" + mSelectposition + ",CurrentPage=" + mCurrentPage);
					// requestHttp(pageNumber, mPageSize);
					productColorSelectRequestHttp();
				}
			}
		}
	}

	@Override
	public void onScroll(AbsListView view, int firstVisibleItem, int visibleItemCount, int totalItemCount) {

	}
}
