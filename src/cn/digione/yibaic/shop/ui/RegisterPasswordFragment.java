package cn.digione.yibaic.shop.ui;import android.os.Bundle;import android.os.CountDownTimer;import android.text.Editable;import android.text.TextUtils;import android.view.KeyEvent;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Button;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.TextView;import cn.digione.yibaic.shop.R;import cn.digione.yibaic.shop.bean.ForgetPasswordBean;import cn.digione.yibaic.shop.bean.JsonNoneOutBean;import cn.digione.yibaic.shop.common.Constants;import cn.digione.yibaic.shop.http.CustomerJsonHttpResponseHandler;import cn.digione.yibaic.shop.http.HttpClient;import cn.digione.yibaic.shop.util.Log;import cn.digione.yibaic.shop.util.Utils;import com.loopj.android.http.RequestParams;/** * Created with IntelliJ IDEA. * User: youzh * Date: 14-3-4 * Time: 下午5:41 */public class RegisterPasswordFragment extends StepsFragment {    private static final String ACTION_REG_SMS_SENT = "cn.100jia.shop.action.REG_SMS_SENT";    private static final int ERROR_NETWORK = 1;    private static final int ERROR_PHONE_NULL = 4;    private static final int ERROR_SEND_SMS_FAIL = 3;    private static final int ERROR_SERVER = 2;    private static final int ROLL_SMS_SEND_TIMEOUT = 10;    private int accountType;    private int modeType;    private EditText mPasswordConfirmView;    private EditText mPasswordView;    private String register;    private EditText validateCodeEdit;    private Button validateCodeBtn;    private ValidateCodeCountDownTimer validateCodeCountDownTimer;    private CustomerJsonHttpResponseHandler<JsonNoneOutBean> sendSmsCodeResponseHandler;    private CustomerJsonHttpResponseHandler<ForgetPasswordBean> forgetPasswordResponseHandler;    private CustomerJsonHttpResponseHandler<JsonNoneOutBean> registerResponseHandler;    private CustomerJsonHttpResponseHandler<JsonNoneOutBean> mobileResetPasswordResponseHandler;    class ValidateCodeCountDownTimer extends CountDownTimer {        public ValidateCodeCountDownTimer() {            super(120000, 1000);        }        @Override        public void onFinish() {            validateCodeBtn.setEnabled(true);            validateCodeBtn.setText(R.string.get_validate_code);        }        @Override        public void onTick(long millisUntilFinished) {            validateCodeBtn.setEnabled(false);            validateCodeBtn.setText(getActivity().getString(R.string.counting_validate_code, (millisUntilFinished / 1000)));        }    }    /**     * 获取密码字符满足的规则数组     *     * @param passwordWithinChars     *            规则数组     * @param passwordChar     *            密码字符     * @return 规则数组     */    private static char[] getPasswordWithinRuleChar(char[] passwordWithinChars, char passwordChar) {        if ((passwordChar >= 'A' && passwordChar <= 'Z') || (passwordChar >= 'a' && passwordChar <= 'z')) {            // 第一位为1时必须包含一个字母（A-Z）（a-z）            // A-Z 41-5A            // a-z 61-7A            passwordWithinChars[0] = '1';        } else if (passwordChar >= '0' && passwordChar <= '9') {            // 第二位为1时必须包含一个数字字符（0-9）            // 0-9 30-39            passwordWithinChars[1] = '1';        } else if ((passwordChar >= '!' && passwordChar <= '/') || (passwordChar >= ':' && passwordChar <= '@')                   || (passwordChar >= '[' && passwordChar <= '`') || (passwordChar >= '{' && passwordChar <= '~')) {            // 第三位为1时必须包含特殊字符            // !"#$%&'()*+,-./ 20-2F            // :;<=>?@ 3A-40            // [\]^_` 5B-60            // {|}~ 7B-7E            passwordWithinChars[2] = '1';        }        return passwordWithinChars;    }    /**     * 获取密码满足的规则数组     *     * @param password     *            密码字符串     * @return 规则数组     */    private static boolean checkPasswordRule(String password) {        char[] passwordWithinChars = { '0', '0', '0' };        char[] passwordChars = password.toCharArray();        for (char passwordChar : passwordChars) {            passwordWithinChars = getPasswordWithinRuleChar(passwordWithinChars, passwordChar);        }        String passwordRule = new String(passwordWithinChars);        return passwordRule.equals("110") || passwordRule.equals("111");    }    public static boolean checkPasswordPattern(String password) {        if (password != null) {            int len = password.length();            if (len >= 8 && len <= 16) {                return checkPasswordRule(password);            }        }        return true;    }    private String checkAndGetPassword() {        Editable passwordEditable = mPasswordView.getText();        if (null == passwordEditable || TextUtils.isEmpty(passwordEditable.toString())) {            mPasswordView.setError(Utils.getErrorSpanString(R.string.error_empty_pwd, getActivity()));            mPasswordView.requestFocus();            return null;        }        String password = passwordEditable.toString();        if (!checkPasswordPattern(password)) {            mPasswordView.setError(Utils.getErrorSpanString(R.string.error_illegal_pwd, getActivity()));            mPasswordView.requestFocus();            return null;        }        Editable passwordConfirmEditable = mPasswordConfirmView.getText();        if (null == passwordConfirmEditable || !password.equals(passwordConfirmEditable.toString())) {            mPasswordConfirmView.setError(Utils.getErrorSpanString(R.string.password_error_inconsistent, getActivity()));            mPasswordView.requestFocus();            return null;        }        return password;    }    public String getPassword() {        Editable passwordEditable = mPasswordView.getText();        if (null != passwordEditable) {            return passwordEditable.toString();        }        return null;    }    private String getValidateCode() {        Editable validateCodeEditable = validateCodeEdit.getText();        if (null != validateCodeEditable) {            return validateCodeEditable.toString();        }        return null;    }    @Override    protected void onButtonNextClicked() {        final String validateCode = getValidateCode();        if (Constants.ArgValue.AccountType.PHONE == accountType) {            if (TextUtils.isEmpty(validateCode)) {                validateCodeEdit.setError(Utils.getErrorSpanString(R.string.error_empty_validate_code, getActivity()));                validateCodeEdit.requestFocus();                return;            }        }        final String password = checkAndGetPassword();        if (TextUtils.isEmpty(password)) {            Log.w("no argument found");            return;        }        if (Constants.ArgValue.AccountType.PHONE == accountType) {            Utils.SoftInput.hide(getActivity(), getView().getWindowToken());            if (Constants.ArgValue.ModeType.REGISTER == modeType) {                HttpClient httpClient = HttpClient.getInstall(getActivity());                RequestParams params = new RequestParams();                params.put(Constants.ArgName.Request.Register.USER_VO_MOBILE, register);                params.put(Constants.ArgName.Request.Register.USER_VO_PASSWORD, password);                params.put(Constants.ArgName.Request.Register.PHONE_CODE, validateCode);                httpClient.postAsync(Constants.NetWorkRequest.REGISTER_URL_009, params, registerResponseHandler);            } else if (Constants.ArgValue.ModeType.FORGET_PASSWORD == modeType) {                HttpClient httpClient = HttpClient.getInstall(getActivity());                RequestParams params = new RequestParams();                params.put(Constants.ArgName.Request.ForgetPassword.VALIDATE_CODE, validateCode);                params.put(Constants.ArgName.Request.ForgetPassword.NEW_PASSWORD, password);                httpClient.postAsync(Constants.NetWorkRequest.MOBILE_RESET_PASSWORD_URL_011, params,                                     mobileResetPasswordResponseHandler);            }        } else if (Constants.ArgValue.AccountType.EMAIL == accountType) {            Utils.SoftInput.hide(getActivity(), getView().getWindowToken());            HttpClient httpClient = HttpClient.getInstall(getActivity());            RequestParams params = new RequestParams();            params.put(Constants.ArgName.Request.Register.USER_VO_EMAIL, register);            params.put(Constants.ArgName.Request.Register.USER_VO_PASSWORD, password);            httpClient.postAsync(Constants.NetWorkRequest.REGISTER_URL_009, params, registerResponseHandler);        }    }    @Override    public View onCreateView(LayoutInflater layoutinflater, ViewGroup viewgroup, Bundle bundle) {		super.onCreateView(layoutinflater, viewgroup, bundle);        View view = layoutinflater.inflate(R.layout.register_input_password, viewgroup, false);        if (null == view) {            return null;        }        super.isUpdateShopCartData = false;        accountType = getArguments().getInt(Constants.ArgName.UI.RegisterPassword.ACCOUNT_TYPE);        modeType = getArguments().getInt(Constants.ArgName.UI.RegisterPassword.MODE_TYPE);        register = getArguments().getString(Constants.ArgName.UI.RegisterPassword.REGISTER);        mPasswordView = (EditText) view.findViewById(R.id.ev_password);        mPasswordConfirmView = (EditText) view.findViewById(R.id.ev_password_confirm);        mPasswordConfirmView.setOnEditorActionListener(new TextView.OnEditorActionListener() {            public boolean onEditorAction(TextView textview, int i, KeyEvent keyevent) {                if (i == 5) {                    triggerNextStep();                    return true;                }                return false;            }        });        mPasswordView.setOnFocusChangeListener(new View.OnFocusChangeListener() {            public void onFocusChange(View v, boolean hasFocus) {                if (!hasFocus) {                    String s = getPassword();                    if (TextUtils.isEmpty(s)) {                        mPasswordView.setError(Utils.getErrorSpanString(R.string.error_empty_pwd, getActivity()));                    } else if (!checkPasswordPattern(s)) {                        mPasswordView.setError(Utils.getErrorSpanString(R.string.error_illegal_pwd, getActivity()));                    }                }            }        });        LinearLayout validateCodePanel = (LinearLayout) view.findViewById(R.id.validate_code_panel);        if (Constants.ArgValue.AccountType.PHONE == accountType) {            validateCodePanel.setVisibility(View.VISIBLE);        } else if (Constants.ArgValue.AccountType.EMAIL == accountType) {            validateCodePanel.setVisibility(View.GONE);        }        validateCodeEdit = (EditText) view.findViewById(R.id.ev_validate_code);        validateCodeEdit.requestFocus();        validateCodeEdit.setOnFocusChangeListener(new View.OnFocusChangeListener() {            @Override            public void onFocusChange(View v, boolean hasFocus) {                if (!hasFocus) {                    if (TextUtils.isEmpty(getValidateCode())) {                        validateCodeEdit.setError(Utils.getErrorSpanString(R.string.error_empty_validate_code, getActivity()));                    }                }            }        });        validateCodeBtn = (Button) view.findViewById(R.id.btn_validate_code);        validateCodeBtn.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                if (Constants.ArgValue.ModeType.REGISTER == modeType) {                    // 调用发送手机验证码接口                    RequestParams params = new RequestParams(Constants.ArgName.Request.SendSmsCode.USER_VO_MOBILE, register);                    HttpClient httpClient = HttpClient.getInstall(getActivity());                    httpClient.postAsync(Constants.NetWorkRequest.SEND_SMS_CODE_URL_012, params, sendSmsCodeResponseHandler);                } else if (Constants.ArgValue.ModeType.FORGET_PASSWORD == modeType) {                    // 调用忘记密码接口                    RequestParams params = new RequestParams(Constants.ArgName.Request.ForgetPassword.LOGIN_STRING, register);                    HttpClient httpClient = HttpClient.getInstall(getActivity());                    httpClient.postAsync(Constants.NetWorkRequest.FORGET_PASSWORD_URL_010, params, forgetPasswordResponseHandler);                }            }        });        sendSmsCodeResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getActivity()) {            @Override            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {                if (null == validateCodeCountDownTimer) {                    validateCodeCountDownTimer = new ValidateCodeCountDownTimer();                }                validateCodeCountDownTimer.start();            }        };        forgetPasswordResponseHandler = new CustomerJsonHttpResponseHandler<ForgetPasswordBean>(getActivity()) {            @Override            public void processCallSuccess(ForgetPasswordBean outBean, String msg) {                if (null == validateCodeCountDownTimer) {                    validateCodeCountDownTimer = new ValidateCodeCountDownTimer();                }                validateCodeCountDownTimer.start();            }        };        registerResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getActivity()) {            @Override            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {                if (Constants.ArgValue.AccountType.PHONE == accountType) {                    PhoneOperateResultFragment phoneOperateResultFragment = new PhoneOperateResultFragment();                    Bundle bundle = new Bundle();                    bundle.putInt(Constants.ArgName.UI.PhoneOperateResult.TITLE_NAME, R.string.title_activate);                    bundle.putInt(Constants.ArgName.UI.PhoneOperateResult.STATUS_TEXT_ID,                                  R.string.register_by_phone_succeed);                    phoneOperateResultFragment.setArguments(bundle);                    replaceToFragment(phoneOperateResultFragment, true);                    getActivity().setResult(-1);                } else if (Constants.ArgValue.AccountType.EMAIL == accountType) {                    Utils.SoftInput.hide(getActivity(), getView().getWindowToken());                    RegisterEmailSentFragment registeremailsentfragment = new RegisterEmailSentFragment();                    Bundle bundle1 = new Bundle();                    bundle1.putString(Constants.ArgName.UI.RegisterPassword.REGISTER, register);                    bundle1.putInt(Constants.ArgName.UI.RegisterSmsSent.TITLE_NAME, R.string.title_activate);                    registeremailsentfragment.setArguments(bundle1);                    replaceToFragment(registeremailsentfragment, true);                    getActivity().setResult(-1);                }            }        };        mobileResetPasswordResponseHandler = new CustomerJsonHttpResponseHandler<JsonNoneOutBean>(getActivity()) {            @Override            public void processCallSuccess(JsonNoneOutBean outBean, String msg) {                PhoneOperateResultFragment phoneOperateResultFragment = new PhoneOperateResultFragment();                Bundle bundle = new Bundle();                bundle.putInt(Constants.ArgName.UI.PhoneOperateResult.TITLE_NAME, R.string.title_forget_password);                bundle.putInt(Constants.ArgName.UI.PhoneOperateResult.STATUS_TEXT_ID,                              R.string.forget_password_by_phone_succeed);                phoneOperateResultFragment.setArguments(bundle);                replaceToFragment(phoneOperateResultFragment, true);                getActivity().setResult(-1);            }        };        return view;    }    @Override    public void onResume() {        super.onResume();        displaySoftInputIfNeed(mPasswordView, true);    }    @Override    public void onPause() {        if (null != validateCodeCountDownTimer) {            validateCodeCountDownTimer.cancel();        }        super.onPause();    }}